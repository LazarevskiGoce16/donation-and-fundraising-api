# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Create application.properties
      run: |
        mkdir -p DonationFundraisingAPI/src/main/resources
        echo -e " 
        server.port=8080\n
        
        security.api.key=d2acd0bb-a886-42d4-9b37-64acb48fb600\n
        
        spring.datasource.url=jdbc:h2:mem:fundraisingdb\n
        spring.datasource.driverClassName=org.h2.Driver\n
        spring.datasource.username=sa\n
        spring.datasource.password=password\n
        spring.datasource.initialization-mode=always\n
        
        spring.h2.console.enabled=true\n
        spring.h2.console.path=/h2-console\n
        
        spring.jpa.database-platform=org.hibernate.dialect.H2Dialect\n
        spring.jpa.hibernate.ddl-auto=none\n
        spring.jpa.show-sql=true\n
        spring.jpa.properties.hibernate.format_sql=true\n
        
        spring.sql.init.mode=always\n
        
        logging.level.org.springframework=INFO\n
        logging.level.com.yourorg.fundraising=DEBUG\n
        
        debug=true" > DonationFundraisingAPI/src/main/resources/application.properties
    - name: Build with Maven
      run: mvn clean package spring-boot:repackage -f DonationFundraisingAPI/pom.xml -B

    - name: Install lsof
      run: sudo apt-get update && sudo apt-get install -y lsof

    - name: Verify executable JAR contents
      run: jar tf ./DonationFundraisingAPI/target/*.jar | head -40

    - name: Run jar in background and wait briefly
      run: |
        echo "Finding PID on port 8080..."
        PID=$(sudo lsof -t -i:8080 || true)
        if [ -n "$PID" ]; then
          echo "Killing process on port 8080 with PID: $PID"
          sudo kill -9 "$PID"
        else
          echo "No process found using port 8080"
        fi

        echo "Listing files in target directory:"
        ls -l ./DonationFundraisingAPI/target

        JAR_FILE=$(ls ./DonationFundraisingAPI/target/*.jar | head -n 1)

        if [ -z "$JAR_FILE" ]; then
          echo "Error: No JAR file found!"
          exit 1
        fi

        echo "Running JAR file: $JAR_FILE in background"
        nohup sudo java -jar "$JAR_FILE" > app.log 2>&1 &

        echo "Waiting for 10 seconds to allow the app to start..."
        sleep 10

        echo "Last 20 lines of application log:"
        tail -n 20 app.log  

    - name: Stop Spring Boot app
      run: |
        PID=$(sudo lsof -t -i:8080 || true)
        if [ -n "$PID" ]; then
          echo "Stopping app with PID: $PID"
          sudo kill "$PID"
        else
          echo "No process found on port 8080"
        fi

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
      with:
        directory: DonationFundraisingAPI

